// Code generated by running "go generate" in golang.org/x/text. DO NOT EDIT.

package translations

import (
	"golang.org/x/text/language"
	"golang.org/x/text/message"
	"golang.org/x/text/message/catalog"
)

type dictionary struct {
	index []uint32
	data  string
}

func (d *dictionary) Lookup(key string) (data string, ok bool) {
	p, ok := messageKeyToIndex[key]
	if !ok {
		return "", false
	}
	start, end := d.index[p], d.index[p+1]
	if start == end {
		return "", false
	}
	return d.data[start:end], true
}

func init() {
	dict := map[string]catalog.Dictionary{
		"de_DE": &dictionary{index: de_DEIndex, data: de_DEData},
		"en_GB": &dictionary{index: en_GBIndex, data: en_GBData},
		"fr_CH": &dictionary{index: fr_CHIndex, data: fr_CHData},
	}
	fallback := language.MustParse("en-GB")
	cat, err := catalog.NewFromMap(dict, catalog.Fallback(fallback))
	if err != nil {
		panic(err)
	}
	message.DefaultCatalog = cat
}

var messageKeyToIndex = map[string]int{
	"%d books available\n": 1,
	"Welcome!\n":           0,
}

var de_DEIndex = []uint32{ // 3 elements
	0x00000000, 0x00000011, 0x00000030,
} // Size: 36 bytes

const de_DEData string = "" + // Size: 48 bytes
	"\x04\x00\x01\x0a\x0c\x02Willkommen!\x04\x00\x01\x0a\x1a\x02%[1]d Bücher " +
	"erhältlich"

var en_GBIndex = []uint32{ // 3 elements
	0x00000000, 0x0000000e, 0x00000029,
} // Size: 36 bytes

const en_GBData string = "" + // Size: 41 bytes
	"\x04\x00\x01\x0a\x09\x02Welcome!\x04\x00\x01\x0a\x16\x02%[1]d books avai" +
	"lable"

var fr_CHIndex = []uint32{ // 3 elements
	0x00000000, 0x00000011, 0x0000002f,
} // Size: 36 bytes

const fr_CHData string = "" + // Size: 47 bytes
	"\x04\x00\x01\x0a\x0c\x02Bienvenue !\x04\x00\x01\x0a\x19\x02%[1]d livres " +
	"disponibles"

	// Total table size 244 bytes (0KiB); checksum: F465EAF9
